<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring基础 on Lay-z's Blog</title><link>/frameworks/spring/spring_basic/</link><description>Recent content in Spring基础 on Lay-z's Blog</description><generator>Hugo</generator><language>en</language><copyright>Copyright (c) 2020-2024 Thulite</copyright><lastBuildDate>Thu, 07 Sep 2023 16:04:48 +0200</lastBuildDate><atom:link href="/frameworks/spring/spring_basic/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring框架概述</title><link>/frameworks/spring/spring_basic/spring-basic/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>/frameworks/spring/spring_basic/spring-basic/</guid><description>&lt;p&gt;一、Spring概述&lt;/p&gt;
&lt;p&gt;什么是框架？框架就是多个可重用模块的集合，形成一个某个领域的整体解决&lt;/p&gt;
&lt;p&gt;Spring框架是一个开源的容器框架。为什么叫容器？因为Spring可以管理所有的组件(类)。&lt;/p&gt;
&lt;p&gt;Spring的jar包三个为一组，javadoc中包含相关文档，sources是Spring源码&lt;/p&gt;
&lt;p&gt;Spring的优良特性&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API&lt;/li&gt;
&lt;li&gt;依赖注入：DI，IOC最经典的实现&lt;/li&gt;
&lt;li&gt;面向切面编程：AOP&lt;/li&gt;
&lt;li&gt;容器：Spring是一个容器，因为它包含并且管理应用对象的生命周期&lt;/li&gt;
&lt;li&gt;组件化：Spring实现了使用简单的组件配置组合成一个复杂的应用，在Spring中可以使用XML和Java注解组合这些对象&lt;/li&gt;
&lt;li&gt;一站式：在IOC和AOP的基础上可以整合各种企业应用的开源框架和第三方类库。从前到后，从页面到数据库都有支持&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;二、Spring的模块划分&lt;/p&gt;
&lt;p&gt;Spring框架采用分层架构，根据不同的功能被划分成了多个模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。&lt;/p&gt;
&lt;p&gt;Test：Spring的单元测试&lt;/p&gt;
&lt;p&gt;spring-test-5.2.6.RELEASE.jar&lt;/p&gt;
&lt;p&gt;Core Container：
核心容器IOC，这些功能由以下jar包组成，如果要使用这部分功能，需要把这些jar包全部导入&lt;/p&gt;
&lt;p&gt;spring-beans-5.2.6.RELEASE.jar
spring-core-5.2.6.RELEASE.jar
spring-context-5.2.6.RELEASE.jar
spring-expression-5.2.6.RELEASE.jar&lt;/p&gt;</description></item><item><title>Spring AOP</title><link>/frameworks/spring/spring_basic/spring-aop/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>/frameworks/spring/spring_basic/spring-aop/</guid><description>&lt;h1 id="一什么是aop"&gt;一、什么是AOP？&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;AOP(Aspect Oriented Programming)&lt;/code&gt;指的是面向切面编程，它的出现并不是用来替代&lt;code&gt;OOP(Object Oriented Programming)&lt;/code&gt;的，而是基于&lt;code&gt;OOP(Object Oriented Programming)&lt;/code&gt;基础之上新的编程思想。&lt;/p&gt;
&lt;p&gt;面向切面编程，通俗一点说，就是指将某段代码动态的切入到指定方法的指定位置进行运行的编程方式。&lt;/p&gt;
&lt;p&gt;举个例子，假设我们有加减乘除四个方法，并且要在每个方法运行的时候添加日志记录，有以下几种做法：&lt;/p&gt;
&lt;p&gt;1.直接编写在方法内部；&lt;/p&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;pre tabindex="0"&gt;&lt;code&gt;public class NumberUtil {

 public static int add(int i, int j) {
 System.out.println(&amp;#34;运行add..，参数是&amp;#34; + i + &amp;#34;,&amp;#34; + j);
 int result = i + j;
 System.out.println(&amp;#34;运行add..，结果是&amp;#34; + result);
 return result;
 }

 public static int sub(int i, int j) {
 System.out.println(&amp;#34;运行sub..，参数是&amp;#34; + i + &amp;#34;,&amp;#34; + j);
 int result = i - j;
 System.out.println(&amp;#34;运行sub..，结果是&amp;#34; + result);
 return result;
 }

 public static int mul(int i, int j) {
 System.out.println(&amp;#34;运行mul..，参数是&amp;#34; + i + &amp;#34;,&amp;#34; + j);
 int result = i * j;
 System.out.println(&amp;#34;运行mul..，结果是&amp;#34; + result);
 return result;
 }

 public static int div(int i, int j) {
 System.out.println(&amp;#34;运行div..，参数是&amp;#34; + i + &amp;#34;,&amp;#34; + j);
 int result = i / j;
 System.out.println(&amp;#34;运行div..，结果是&amp;#34; + result);
 return result;
 }
}&lt;/code&gt;&lt;/pre&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;加减乘除是业务核心逻辑，添加日志记录只是系统的辅助功能，直接将日志记录编写在方法内部，导致业务核心逻辑和系统辅助功能代码耦合，代码可读性差，并且修改维护麻烦，所以不推荐这么做。&lt;/p&gt;</description></item><item><title>声明式事务</title><link>/frameworks/spring/spring_basic/spring-transcationc/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>/frameworks/spring/spring_basic/spring-transcationc/</guid><description>&lt;p&gt;在学习声明式事务之前，我们先回忆一下什么是事务：&lt;a href="https://www.cnblogs.com/mark5/p/11076623.html"&gt;【什么是事务】&lt;/a&gt;。既然是事务，就免不了要操作数据库，Spring提供了JdbcTemplate，可以快捷的操作数据库。&lt;/p&gt;
&lt;h1 id="一jdbctemplate"&gt;一、JdbcTemplate&lt;/h1&gt;
&lt;p&gt;JdbcTemplate是Spring提供的进行数据访问的工具，想要使用JdbcTemplate，首先需要导入以下三个Jar包：&lt;/p&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;pre tabindex="0"&gt;&lt;code&gt;spring-jdbc-5.2.6.RELEASE.jar
spring-orm-5.2.6.RELEASE.jar // 对象关系映射
spring-tx-5.2.6.RELEASE.jar // 事务&lt;/code&gt;&lt;/pre&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;Jar包导入之后，怎么使用JdbcTemplate来操作数据库呢？&lt;/p&gt;
&lt;p&gt;访问数据库，首先需要知道数据源，我们可以通过new的方式获取dataSource和JdbcTemplate，然后使用JdbcTemplate中的增删改查方法即可。&lt;/p&gt;



&lt;div class="expressive-code"&gt;
 &lt;figure class="frame not-content"&gt;
 &lt;figcaption class="header"&gt;
 &lt;span class="title"&gt;&lt;/span&gt;
 &lt;/figcaption&gt;
 &lt;pre tabindex="0"&gt;&lt;code&gt; public void test() throws SQLException, PropertyVetoException {
 JdbcTemplate jdbcTemplate = new JdbcTemplate();
 ComboPooledDataSource dataSource = new ComboPooledDataSource();
 dataSource.setUser(&amp;#34;&amp;#34;);
 dataSource.setPassword(&amp;#34;&amp;#34;);
 dataSource.setJdbcUrl(&amp;#34;&amp;#34;);
 dataSource.setDriverClass(&amp;#34;&amp;#34;);

 jdbcTemplate.setDataSource(dataSource);
 }&lt;/code&gt;&lt;/pre&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;另外一种方式，就是在Spring容器中注册dataSource和JdbcTemplate，我们要使用JdbcTemplate的时候，直接去Spring容器中取，之后再使用JdbcTemplate中的增删改查方法来操作数据库。&lt;/p&gt;</description></item></channel></rss>